<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>NaturalSpec</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:NaturalSpec.AssemblyInfo">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:NaturalSpec.Expectations.expectations">
<summary>
 All expectations
</summary>
</member>
<member name="">

</member>
<member name="M:NaturalSpec.Expectations.findScenario">
<summary>
 Try to find scenario in call stack
</summary>
</member>
<member name="T:NaturalSpec.Expectations">

</member>
<member name="M:NaturalSpec.File.same_file_as(System.String,System.String)">
<summary>
 Tests if the given files are identical 
</summary>
</member>
<member name="M:NaturalSpec.File.on_disk(System.String)">
<summary>
 Tests if the file is saved
</summary>
</member>
<member name="T:NaturalSpec.File">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:NaturalSpec.IlHelper">

</member>
<member name="M:NaturalSpec.Math.calculating``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0)">
<summary>
 Calculate f(x)
</summary>
</member>
<member name="M:NaturalSpec.Math.multiply_with(System.Int32,System.Int32)">
<summary>
 Multiplies x and y
</summary>
</member>
<member name="M:NaturalSpec.Math.dividing_by(System.Int32,System.Int32)">
<summary>
 Divides x and y
</summary>
</member>
<member name="M:NaturalSpec.Math.adding(System.Int32,System.Int32)">
<summary>
 Adds x and y
</summary>
</member>
<member name="M:NaturalSpec.Math.list_of_random_ints(System.Int32)">
<summary>
 generates a list of n random ints
</summary>
</member>
<member name="M:NaturalSpec.Math.list_of_random_floats(System.Int32)">
<summary>
 generates a list of n random floats
</summary>
</member>
<member name="">

</member>
<member name="T:NaturalSpec.Math">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:NaturalSpec.Mock">

</member>
<member name="M:NaturalSpec.SequenceFunctions.contain_no_other_elements_than``2(System.Collections.Generic.IEnumerable{``0},``1)">
<summary>
 Test if the sequence contains no other elements than sequence x
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.contain_all_elements_from``2(System.Collections.Generic.IEnumerable{``0},``1)">
<summary>
 Test if the sequence contains all elements from sequence x
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.sorted``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Test if the sequence is sorted
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.sorting_with``1(``0)">
<summary>
 Applies the sorting function f
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.empty``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Test if the sequence is empty
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.length``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
<summary>
 Test if sequence has length n
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.duplicates``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Test if the element is in the sequence
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.contain``1(``0,System.Collections.Generic.IEnumerable{``0})">
<summary>
 Test if the element is in the sequence
</summary>
</member>
<member name="M:NaturalSpec.SequenceFunctions.removing``1(``0,System.Collections.Generic.IEnumerable{``0})">
<summary>
 Remove an element from the sequence
</summary>
</member>
<member name="T:NaturalSpec.SequenceFunctions">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:NaturalSpec.Syntax.Verify``1(``0)">
<summary>
 Verifies a scenario   
</summary>
</member>
<member name="M:NaturalSpec.Syntax.Named(System.String,Microsoft.FSharp.Collections.FSharpList{NUnit.Framework.TestCaseData})">
<summary>
 Adds an Description to the testcase
</summary>
</member>
<member name="M:NaturalSpec.Syntax.ShouldFailWith(System.Type,Microsoft.FSharp.Collections.FSharpList{NUnit.Framework.TestCaseData})">
<summary>
 Adds an ExpectedException to the testcase
</summary>
</member>
<member name="M:NaturalSpec.Syntax.GenerateTestData(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,NaturalSpec.Syntax.TestCaseParam},System.Int32)">
<summary>
 Generates testdata from n-times application of the given function
</summary>
</member>
<member name="M:NaturalSpec.Syntax.And(NaturalSpec.Syntax.TestCaseParam,Microsoft.FSharp.Collections.FSharpList{NUnit.Framework.TestCaseData})">
<summary>
 Adds a test case to the list of testcases
</summary>
</member>
<member name="M:NaturalSpec.Syntax.TestWithList``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Generates from a list
</summary>
</member>
<member name="">

</member>
<member name="M:NaturalSpec.Syntax.TestWith(NaturalSpec.Syntax.TestCaseParam)">
<summary>
 Generates a testcase
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:NaturalSpec.Syntax.testData``3(``0,``1,``2)">
<summary>
 generates TestCaseData object
</summary>
</member>
<member name="M:NaturalSpec.Syntax.shouldn't``5(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Tuple`4{NaturalSpec.Utils.AssertType,``2,``3,``4}}},``0,``1)">
<summary>
 Fluid helper - prints &quot;should not &quot;
 Tests if the given observation does not hold
 Use it as in &quot;|&gt; It shouldn&apos;t equal 5&quot;
</summary>
</member>
<member name="M:NaturalSpec.Syntax.should``5(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Tuple`4{NaturalSpec.Utils.AssertType,``2,``3,``4}}},``0,``1)">
<summary>
 Fluid helper - prints &quot;should &quot;
 Tests if the given observation hold
 Use it as in &quot;|&gt; It should equal 5&quot;              
</summary>
</member>
<member name="M:NaturalSpec.Syntax.have``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0)">
<summary>
 Fluid helper - prints &quot;have &quot;
 Tests for boolean condition
 Use it as in &quot;|&gt; It should be true&quot;    
</summary>
</member>
<member name="M:NaturalSpec.Syntax.be``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0)">
<summary>
 Fluid helper - prints &quot;be &quot;
 Tests for boolean condition
 Use it as in &quot;|&gt; It should be true&quot;    
</summary>
</member>
<member name="M:NaturalSpec.Syntax.castingAs``1(System.Object)">
<summary>
 Fluid helper - prints &quot;casting as type &quot;
</summary>
</member>
<member name="M:NaturalSpec.Syntax.equal``1(``0,``0)">
<summary>
 Fluid helper - prints &quot;equal &quot;
 Tests for equality
 Use it as in &quot;|&gt; It should equal x&quot;
</summary>
</member>
<member name="M:NaturalSpec.Syntax.checkEquality``2(``0,``0,``1)">
<summary>
 Tests for equality
</summary>
</member>
<member name="M:NaturalSpec.Syntax.Whereas``2(``0,``1)">
<summary>
 Tests a condition on the given value
 Represents the Assert phase of &quot;Arrange&quot;-&quot;Act&quot;-&quot;Assert&quot;    
</summary>
</member>
<member name="M:NaturalSpec.Syntax.It``1(``0)">
<summary>
 Tests a condition on the manipulated test context
 Represents the Assert phase of &quot;Arrange&quot;-&quot;Act&quot;-&quot;Assert&quot;         
</summary>
</member>
<member name="M:NaturalSpec.Syntax.getting``1(``0)">
<summary>
 Fluid helper - prints &quot;getting&quot;
</summary>
</member>
<member name="M:NaturalSpec.Syntax.solving``1(``0)">
<summary>
 Fluid helper - prints &quot;solving&quot;
</summary>
</member>
<member name="M:NaturalSpec.Syntax.nothing``1(``0)">
<summary>
 Fluid helper - prints &quot;nothing &quot;  
</summary>
</member>
<member name="M:NaturalSpec.Syntax.doing``1(``0)">
<summary>
 Fluid helper - prints &quot;doing &quot;
</summary>
</member>
<member name="M:NaturalSpec.Syntax.When``1(``0)">
<summary>
 Acts on the given test context
 Represents the Act phase of &quot;Arrange&quot;-&quot;Act&quot;-&quot;Assert&quot;      
</summary>
</member>
<member name="M:NaturalSpec.Syntax.As``1(``0)">
<summary>
 Sets a test context up - same as &quot;Given&quot;  
</summary>
</member>
<member name="M:NaturalSpec.Syntax.Given``1(``0)">
<summary>
 Sets a test context up - same as &quot;As&quot;  
 Represents the Arrange phase of &quot;Arrange&quot;-&quot;Act&quot;-&quot;Assert&quot;      
</summary>
</member>
<member name="M:NaturalSpec.Syntax.initScenario">
<summary>
 Inits a scenario    
</summary>
</member>
<member name="M:NaturalSpec.Syntax.printMethod(System.Object)">
<summary>
 Prints the method name and the given parameter to the spec output           
</summary>
</member>
<member name="M:NaturalSpec.Syntax.methodName(System.Int32,System.Object)">
<summary>
 Get the method name      
</summary>
</member>
<member name="T:NaturalSpec.Syntax">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:NaturalSpec.TimeMeasurement">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:NaturalSpec.Utils.AssertType">
<summary>
 Internal type of Assertion
</summary>
</member>
<member name="M:NaturalSpec.Utils.not'``3(NaturalSpec.Utils.AssertType,``0,``1,``2)">
<summary>
 Negotiates a observation
</summary>
</member>
<member name="M:NaturalSpec.Utils.check``1(NaturalSpec.Utils.AssertType,System.Object,System.Object,``0)">
<summary>
 Checks if the given condition is valid
</summary>
</member>
<member name="M:NaturalSpec.Utils.printScenario">
<summary>
 Prints the test scenario name to the spec output         
</summary>
</member>
<member name="M:NaturalSpec.Utils.toSpec(System.String)">
<summary>
 Writes the given string to the spec output
</summary>
</member>
<member name="P:NaturalSpec.Utils.specWriter">
<summary>
 Streamwriter for spec output
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:NaturalSpec.Utils">

</member>
</members>
</doc>
