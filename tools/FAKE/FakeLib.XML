<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FakeLib</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.AssemblyInfoHelper.AssemblyInfo(Microsoft.FSharp.Core.FSharpFunc`2{Fake.AssemblyInfoHelper.AssemblyInfoParams,Fake.AssemblyInfoHelper.AssemblyInfoParams})">
<summary>
 Generates an AssemblyInfo file for projects
</summary>
</member>
<member name="M:Fake.AssemblyInfoHelper.generateFile(Fake.AssemblyInfoHelper.AssemblyInfoParams,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.IO.TextWriter)">
<summary>
 generates the assembly info file
</summary>
</member>
<member name="P:Fake.AssemblyInfoHelper.AssemblyInfoDefaults">
<summary>
 AssemblyInfo default params
</summary>
</member>
<member name="T:Fake.AssemblyInfoHelper">

</member>
<member name="M:Fake.AsyncHelper.doParallel``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 Runs the given function on all items in parallel
</summary>
</member>
<member name="T:Fake.AsyncHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.BuildServerHelper.TraceMode">
<summary>
 The trace Mode type.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.BuildServerHelper.BuildServer">
<summary>
 The BuildServer type.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.traceMode">
<summary>
 The actual trace mode.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.isLocalBuild">
<summary>
 Determines if the current build is a local build.
</summary>
</member>
<member name="P:Fake.BuildServerHelper.buildServer">
<summary>
 Determines the current BuildVersion and if it is a local build
</summary>
</member>
<member name="P:Fake.BuildServerHelper.buildVersion">
<summary>
 Determines the current BuildVersion and if it is a local build
</summary>
</member>
<member name="P:Fake.BuildServerHelper.ccBuildLabel">
<summary>
 CruiseControl.NET Build label
</summary>
</member>
<member name="P:Fake.BuildServerHelper.tcBuildNumber">
<summary>
 Build number retrieved from TeamCity
</summary>
</member>
<member name="P:Fake.BuildServerHelper.xmlOutputFile">
<summary>
 Definces the XML output file
 Used for BuildServers like CruiseControl.NET
</summary>
</member>
<member name="P:Fake.BuildServerHelper.localBuildLabel">
<summary>
 A constant for local builds            
</summary>
</member>
<member name="T:Fake.BuildServerHelper">

</member>
<member name="M:Fake.CacheHelper.lookup``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``1},System.Collections.Generic.IDictionary{``0,``1})">
<summary>
 Looks for a key in the cache.
 If it is not found the newValue functions is executed and the result is stored in the cache.
</summary>
</member>
<member name="T:Fake.CacheHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.DocuHelper.DocuDefaults">
<summary>
 Docu default params  
</summary>
</member>
<member name="T:Fake.DocuHelper">

</member>
<member name="">

</member>
<member name="M:Fake.EnvironmentHelper.filesInDir(System.IO.DirectoryInfo)">
<summary>
 Gets all files in the directory
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.subDirectories(System.IO.DirectoryInfo)">
<summary>
 Gets all subdirectories
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.FullName(System.String)">
<summary>
 Converts a file to it&apos;s full file system name
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.fileInfo(System.String)">
<summary>
 Creates a FileInfo for the given path
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.directoryInfo(System.String)">
<summary>
 Creates a DirectoryInfo for the given path
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.ProgramFilesX86">
<summary>
 The path of Program Files (x86)
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.ProgramFiles">
<summary>
 The path of Program Files - might be x64 on x64 machine
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getBuildParamOrDefault(System.String,System.String)">
<summary>
 Returns the value of the buildParam if it is set and otherwise the default
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.getBuildParam(System.String)">
<summary>
 Returns the value of the buildParam if it is set and otherwise &quot;&quot; 
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.hasBuildParam(System.String)">
<summary>
 Returns true if the buildParam is set and otherwise false
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.appSetting(System.String)">
<summary>
 Retrieves a ApplicationSettings variable
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVars(System.EnvironmentVariableTarget)">
<summary>
 Retrieves the EnvironmentVariable
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.op_AtAt(System.String,System.String)">
<summary>
 Combines to path strings
</summary>
</member>
<member name="P:Fake.EnvironmentHelper.currentDirectory">
<summary>
 Gets the current directory
</summary>
</member>
<member name="M:Fake.EnvironmentHelper.environVar(System.String)">
<summary>
 Retrieves the EnvironmentVariable
</summary>
</member>
<member name="T:Fake.EnvironmentHelper">

</member>
<member name="M:Fake.FSIHelper.runBuildScript(System.String,System.Collections.Generic.IEnumerable{System.Tuple`2{System.String,System.String}})">
<summary>
 Run the buildscript with fsi
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.FSIHelper">

</member>
<member name="M:Fake.FileHelper.CopyRecursive(System.String,System.String)">
<summary>
 Copies the file structure recursive
</summary>
</member>
<member name="M:Fake.FileHelper.copyRecursive(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
<summary>
 Copies the file structure recursive
</summary>
</member>
<member name="M:Fake.FileHelper.GeneratePatch(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks the srcFiles for changes to the last release
  param lastReleaseDir: The directory of the last release
  param patchDir: The target directory
  param srcFiles: The source files
</summary>
</member>
<member name="M:Fake.FileHelper.GeneratePatchWithFindOldFileFunction(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc`2{System.String,Microsoft.FSharp.Core.FSharpFunc`2{System.String,System.String}})">
<summary>
 Checks the srcFiles for changes to the last release
  param lastReleaseDir: The directory of the last release
  param patchDir: The target directory
  param srcFiles: The source files
  param findOldFileF: A function which finds the old file
            (string -&gt; string -&gt; string)
            (newFile -&gt; oldFileProposal)
</summary>
</member>
<member name="M:Fake.FileHelper.TestDir(System.String)">
<summary>
 Checks if the directory exists
</summary>
</member>
<member name="M:Fake.FileHelper.CompareFiles(System.Boolean,System.String,System.String)">
<summary>
 Compares the given files for changes
 If delete = true then equal files will be removed  
</summary>
</member>
<member name="M:Fake.FileHelper.FilesAreEqual(System.IO.FileInfo,System.IO.FileInfo)">
<summary>
 Checks if the two files are byte-to-byte equal
</summary>
</member>
<member name="M:Fake.FileHelper.AppendTextFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Appends all given files to one file 
   param newFileName: The target FileName.
   param files: The original FileNames as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.ReadCSVFile(System.String)">
<summary>
 Reads a csv file line by line
 delimiter is a ,
</summary>
</member>
<member name="M:Fake.FileHelper.CleanDirs(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Clean multiple directories
</summary>
</member>
<member name="M:Fake.FileHelper.CleanDir(System.String)">
<summary>
 Cleans a directory
</summary>
</member>
<member name="M:Fake.FileHelper.CopyDir(System.String,System.String,Microsoft.FSharp.Core.FSharpFunc`2{System.String,System.Boolean})">
<summary>
 Copies a directory recursivly
 If the target directory does not exist, it will be created
   param target: The target directory.
   param files: The source directory.
   param filterFile: A file filter.
</summary>
</member>
<member name="M:Fake.FileHelper.allFiles(System.String)">
<summary>
 Includes all files
</summary>
</member>
<member name="M:Fake.FileHelper.excludeSVNFiles(System.String)">
<summary>
 Exclude SVN files (path with .svn)
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files to the target - Alias for Copy
   param target: The target directory.
   param files: The original FileNames as a sequence.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.FileHelper.Rename(System.String,System.String)">
<summary>
 Renames the files to the target fileName
   param target: The target FileName.
   param file: The orginal FileName.
</summary>
</member>
<member name="M:Fake.FileHelper.Copy(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Copies the files to the target
   param target: The target directory.
   param files: The original FileNames as a sequence.
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFile(System.String,System.String)">
<summary>
 Copies a single file to the target
   param target: The target directory.
   param fileName: The FileName
</summary>
</member>
<member name="M:Fake.FileHelper.CopyFileIntoSubFolder(System.String,System.String)">
<summary>
 Copies a single file to a relative subfolder of the target
   param target: The targetDirectory
   param fileName: The fileName
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoNameSections|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining FileInfoNameSections
</summary>
</member>
<member name="M:Fake.FileHelper.|FileInfoFullName|(System.IO.FileInfo)">
<summary>
 Active Pattern for determining file name   
</summary>
</member>
<member name="M:Fake.FileHelper.|EndsWith|_|(System.String,System.String)">
<summary>
 Active Pattern for determining file extension
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.FileHelper.DeleteFile(System.String)">
<summary>
 Deletes a file if it exist
</summary>
</member>
<member name="M:Fake.FileHelper.CreateFile(System.String)">
<summary>
 Creates a file if it does not exist
</summary>
</member>
<member name="M:Fake.FileHelper.CreateDir(System.String)">
<summary>
 Creates a directory if it does not exist
</summary>
</member>
<member name="M:Fake.FileHelper.DeleteDir(System.String)">
<summary>
 Deletes a directory if it exists
</summary>
</member>
<member name="M:Fake.FileHelper.SetReadOnly(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Sets all files in the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.SetDirReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets all files in the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.setDirectoryReadOnly(System.Boolean,System.IO.DirectoryInfo)">
<summary>
 Sets the directory readonly 
</summary>
</member>
<member name="M:Fake.FileHelper.recursively(Microsoft.FSharp.Core.FSharpFunc`2{System.IO.DirectoryInfo,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.IO.FileInfo,Microsoft.FSharp.Core.Unit},System.IO.DirectoryInfo)">
<summary>
 Performs the given actions on all files and subdirectories
</summary>
</member>
<member name="M:Fake.FileHelper.allFilesExist(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Checks if all given files exists
</summary>
</member>
<member name="T:Fake.FileHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.FileSetHelper.LazyFileSet">
<summary>
 The FileSet is lazy loaded into a sequence of strings.
 Every time the FileSet is used it scans again.
</summary>
</member>
<member name="T:Fake.FileSetHelper.EagerFileSet">
<summary>
 The FileSet is eagerly loaded into a list of strings.
 The scan is only done once.
</summary>
</member>
<member name="M:Fake.FileSetHelper.op_MinusMinus(Fake.FileSetHelper.FileIncludes,System.String)">
<summary>
 Exclude operator
</summary>
</member>
<member name="M:Fake.FileSetHelper.op_PlusPlus(Fake.FileSetHelper.FileIncludes,System.String)">
<summary>
 Add Include operator
</summary>
</member>
<member name="M:Fake.FileSetHelper.op_BangPlus(System.String)">
<summary>
 Include prefix operator
</summary>
</member>
<member name="M:Fake.FileSetHelper.ScanImmediately(Fake.FileSetHelper.FileIncludes)">
<summary>
 Scans immediately for include files
 Files will be memoized
</summary>
</member>
<member name="M:Fake.FileSetHelper.SetBaseDir(System.String,Fake.FileSetHelper.FileIncludes)">
<summary>
 Sets a directory as baseDirectory for fileIncludes  
</summary>
</member>
<member name="M:Fake.FileSetHelper.AddBaseDir(System.String,Fake.FileSetHelper.FileIncludes)">
<summary>
 Adds a directory as baseDirectory for fileIncludes  
</summary>
</member>
<member name="M:Fake.FileSetHelper.Scan(Fake.FileSetHelper.FileIncludes)">
<summary>
 Lazy scan for include files
 Will be processed at the time when needed
</summary>
</member>
<member name="M:Fake.FileSetHelper.Include(System.String)">
<summary>
 Include files  
</summary>
</member>
<member name="P:Fake.FileSetHelper.DefaultBaseDir">
<summary>
 The default base directory 
</summary>
</member>
<member name="M:Fake.FileSetHelper.Log(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Logs the given files with the message  
</summary>
</member>
<member name="M:Fake.FileSetHelper.Files(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Searches the directories recursively for files and directories matching 
 the search criteria.    
</summary>
</member>
<member name="M:Fake.FileSetHelper.scanDirectory(System.Boolean,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{Fake.FileSetHelper.RegexEntry},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{Fake.FileSetHelper.RegexEntry},System.String,System.Boolean)">
<summary>
 Searches a directory recursively for files and directories matching 
 the search criteria.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FileSetHelper.convertPatterns(System.IO.DirectoryInfo,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Parses specified search patterns for search directories and 
 corresponding regex patterns.
</summary>
</member>
<member name="M:Fake.FileSetHelper.parseSearchDirectoryAndPattern(System.IO.DirectoryInfo,System.String)">
<summary>
 Given a search pattern returns a search directory and an regex search pattern.
</summary>
</member>
<member name="M:Fake.FileSetHelper.regexPattern(System.String)">
<summary>
 Converts search pattern to a regular expression pattern.
</summary>
</member>
<member name="M:Fake.FileSetHelper.ensureEndsWithSlash(System.String)">
<summary>
 Ensures that the last character of the given &lt;see cref=&quot;string&quot; /&gt;
 matches Path.DirectorySeparatorChar.          
</summary>
</member>
<member name="M:Fake.FileSetHelper.endsWithSlash(System.String)">
<summary>
 Determines whether the last character of the given &lt;see cref=&quot;string&quot; /&gt;
 matches Path.DirectorySeparatorChar.         
</summary>
</member>
<member name="M:Fake.FileSetHelper.endsWithChar(System.String,System.Char)">
<summary>
 Determines whether the last character of the given &lt;see cref=&quot;string&quot; /&gt;
 matches the specified character.    
</summary>
</member>
<member name="M:Fake.FileSetHelper.baseDirectory(System.String)">
<summary>
 The base directory to scan. The default is the 
 &lt;see cref=&quot;Environment.CurrentDirectory&quot;&gt;current directory&lt;/see&gt;.
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.FileSetHelper.cleanPath(System.String)">
<summary>
 Patterns can use either / \ as a directory separator.
 cleanPath replaces both of these characters with Path.DirectorySeparatorChar
</summary>
</member>
<member name="M:Fake.FileSetHelper.cleanPathBuilder(System.String)">
<summary>
 Patterns can use either / \ as a directory separator.
 cleanPath replaces both of these characters with Path.DirectorySeparatorChar
</summary>
</member>
<member name="T:Fake.FileSetHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.FxCopHelper.FxCop(Microsoft.FSharp.Core.FSharpFunc`2{Fake.FxCopHelper.FxCopParams,Fake.FxCopHelper.FxCopParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Run FxCop on a group of assemblies.
</summary>
</member>
<member name="P:Fake.FxCopHelper.FxCopDefaults">
<summary>
 FxCop Default params  
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.FxCopHelper">

</member>
<member name="M:Fake.HTMLHelpWorkShopHelper.CompileHTMLHelpProject(System.String,System.String)">
<summary>
 Uses the HTML Help Workshop to compile a help project
   param helpCompiler: The filename of the HTML Help WorkShop tool
   param projectFile: the fileName of the help project 
   returns: The generated files (fileNames)
</summary>
</member>
<member name="T:Fake.HTMLHelpWorkShopHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.ILMergeHelper.ILMerge(Microsoft.FSharp.Core.FSharpFunc`2{Fake.ILMergeHelper.ILMergeParams,Fake.ILMergeHelper.ILMergeParams},System.String,System.String)">
<summary>
 Use ILMerge to merge some .NET assemblies.
</summary>
</member>
<member name="P:Fake.ILMergeHelper.ILMergeDefaults">
<summary>
 ILMerge default params  
</summary>
</member>
<member name="T:Fake.ILMergeHelper">

</member>
<member name="M:Fake.MSBuildHelper.MSBuildRelease(System.String,System.String)">
<summary>
 Builds the given project files and collects the output files
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuildDebug(System.String,System.String)">
<summary>
 Builds the given project files and collects the output files
</summary>
</member>
<member name="M:Fake.MSBuildHelper.MSBuild(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple`2{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Builds the given project files and collects the output files
</summary>
</member>
<member name="M:Fake.MSBuildHelper.build``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Tuple`2{System.String,System.String}},``0,System.String)">
<summary>
 Runs a msbuild project
</summary>
</member>
<member name="P:Fake.MSBuildHelper.msBuildExe">
<summary>
 MSBuild exe fileName
</summary>
</member>
<member name="T:Fake.MSBuildHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.MailBoxHelper.MessageBoxIsEmpty">
<summary>
 Checks if the current message queue is empty
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.MailBoxHelper">

</member>
<member name="M:Fake.MessageHelper.WaitForMessageFile(System.String,System.TimeSpan)">
<summary>
 Waits for another application to create a output file
   - if the timeout is reached an exception will be raised
</summary>
</member>
<member name="M:Fake.MessageHelper.WaitForMessageFiles(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan)">
<summary>
 Waits for other applications to create a output files
 if the timeout is reached an exception will be raised
</summary>
</member>
<member name="T:Fake.MessageHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.NCoverHelper.NCover(Microsoft.FSharp.Core.FSharpFunc`2{Fake.NCoverHelper.NCoverParams,Fake.NCoverHelper.NCoverParams},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Run NCover on a group of assemblies.
 params:
   params - NCover params
   assemblies - the test assemblies, which should be inspected#
   excludeAssemblies - these assemblies are excluded 
</summary>
</member>
<member name="P:Fake.NCoverHelper.NCoverDefaults">
<summary>
 NCover default params
</summary>
</member>
<member name="T:Fake.NCoverHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.NUnitHelper.writeXMLOutput(Fake.NUnitHelper.TestSuite,System.String)">
<summary>
 writes the given TestSuite as XML file in NUnit style
</summary>
</member>
<member name="M:Fake.NUnitHelper.NUnit(Microsoft.FSharp.Core.FSharpFunc`2{Fake.NUnitHelper.NUnitParams,Fake.NUnitHelper.NUnitParams},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Run NUnit on a group of assemblies.
</summary>
</member>
<member name="P:Fake.NUnitHelper.NUnitDefaults">
<summary>
 NUnit default params  
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.NUnitHelper">

</member>
<member name="F:Fake.ProcessHelper.ExecParams.Args">
<summary>
 Command-line argument pairs. The value will be quoted if it contains
 a string, and the result will be appended to the CommandLine property.
 If the key ends in a letter or number, a space will be inserted between
 the key and the value.
</summary>
</member>
<member name="F:Fake.ProcessHelper.ExecParams.CommandLine">
<summary>
 Command-line parameters in a string.
</summary>
</member>
<member name="F:Fake.ProcessHelper.ExecParams.WorkingDirectory">
<summary>
 The working directory for the program. Defaults to &quot;&quot;.
</summary>
</member>
<member name="F:Fake.ProcessHelper.ExecParams.Program">
<summary>
 The path to the executable, without arguments. 
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.ProcessHelper.shellExec">
<summary>
 Execute an external program and return the exit code.
</summary>
</member>
<member name="M:Fake.ProcessHelper.asyncShellExec(Fake.ProcessHelper.ExecParams)">
<summary>
 Execute an external program asynchronously and return the exit code,
 logging output and error messages to FAKE output. You can compose the result
 with Async.Parallel to run multiple external programs at once, but be
 sure that none of them depend on the output of another.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.ProcessHelper.findPath(System.String,System.String)">
<summary>
 Tries to find the tool via AppSettings. If no path has the right tool we are trying the PATH system variable. 
</summary>
</member>
<member name="M:Fake.ProcessHelper.appSettings(System.String)">
<summary>
 Returns the AppSettings for the key - Splitted on ;
</summary>
</member>
<member name="M:Fake.ProcessHelper.findFile(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Searches the given directories for the given file, failing if not found
</summary>
</member>
<member name="M:Fake.ProcessHelper.tryFindFile(System.Collections.Generic.IEnumerable{System.String},System.String)">
<summary>
 Searches the given directories for all occurrences of the given file name
</summary>
</member>
<member name="M:Fake.ProcessHelper.UseDefaults``1">
<summary>
 Use default Parameters
</summary>
</member>
<member name="M:Fake.ProcessHelper.toParam(System.String)">
<summary>
 Adds quotes and a blank around the string   
</summary>
</member>
<member name="M:Fake.ProcessHelper.quote(System.String)">
<summary>
 Adds quotes around the string if needed
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess(Microsoft.FSharp.Core.FSharpFunc`2{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process
 returns true if the exit code was 0
</summary>
</member>
<member name="M:Fake.ProcessHelper.setEnvironmentVariables(System.Diagnostics.ProcessStartInfo,System.Collections.Generic.IEnumerable{System.Tuple`2{System.String,System.String}})">
<summary>
 sets the environment Settings for the given startInfo
 existing values will be overrriden
</summary>
</member>
<member name="M:Fake.ProcessHelper.ExecProcess(Microsoft.FSharp.Core.FSharpFunc`2{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process
 returns the exit code
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess3(Microsoft.FSharp.Core.FSharpFunc`2{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process
 returns if the exit code was 0
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcessAndReturnExitCode(Microsoft.FSharp.Core.FSharpFunc`2{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit})">
<summary>
 Runs the given process
 returns the exit code
</summary>
</member>
<member name="M:Fake.ProcessHelper.execProcess2(Microsoft.FSharp.Core.FSharpFunc`2{System.Diagnostics.ProcessStartInfo,Microsoft.FSharp.Core.Unit},System.Boolean)">
<summary>
 Runs the given process
 returns the exit code
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.ProcessHelper.Event">

</member>
<member name="T:Fake.ProcessHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.REST.ExecutePostCommand(Microsoft.FSharp.Core.FSharpFunc`2{System.Net.WebHeaderCollection,Microsoft.FSharp.Core.Unit},System.String,System.String,System.String,System.String)">
<summary>
 Executes an HTTP POST command and retrives the information.    
 This function will automatically include a &quot;source&quot; parameter if the &quot;Source&quot; property is set.
   param headerF: The client information to perform the POST operation  
   param url: The URL to perform the POST operation
   param userName: The username to use with the request
   param password: The password to use with the request
   param data: The data to post
   returns: The response of the request, or null if we got 404 or nothing.
</summary>
</member>
<member name="M:Fake.REST.ExecuteGetCommand(System.String,System.String,System.String)">
<summary>
 Executes an HTTP GET command and retrives the information.    
   param userName: The username to use with the request
   param password: The password to use with the request
   param url: The URL to perform the GET operation  
   returns: The response of the request, or null if we got 404 or nothing.
</summary>
</member>
<member name="T:Fake.REST">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.RegistryHelper.getRegistryValue(Fake.RegistryHelper.RegistryBaseKey,System.String,System.String)">
<summary>
 gets a registy value as string
</summary>
</member>
<member name="M:Fake.RegistryHelper.getRegistryKey(Fake.RegistryHelper.RegistryBaseKey,System.String)">
<summary>
 gets a registy key
</summary>
</member>
<member name="M:Fake.RegistryHelper.getKey(Fake.RegistryHelper.RegistryBaseKey)">
<summary>
 Maps the RegistryBaseKey to a RegistryKey
</summary>
</member>
<member name="T:Fake.RegistryHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.SqlServer.RunScriptsFromDirectory(System.String,System.String)">
<summary>
 Runs all sql scripts from the given directory on the server  
</summary>
</member>
<member name="M:Fake.SqlServer.RunScripts(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Runs the given sql scripts on the server
</summary>
</member>
<member name="M:Fake.SqlServer.DropAndCreateDatabase(System.String)">
<summary>
 Drops and creates the database (dropped if db exists. created nonetheless)
</summary>
</member>
<member name="M:Fake.SqlServer.Disconnect(Fake.SqlServer.ServerInfo)">
<summary>
 Closes the connection to the server
</summary>
</member>
<member name="M:Fake.SqlServer.runScript(Fake.SqlServer.ServerInfo,System.String)">
<summary>
 Runs a sql script on the server
</summary>
</member>
<member name="M:Fake.SqlServer.CreateDb(Fake.SqlServer.ServerInfo)">
<summary>
 Drops the given InitialCatalog from the server (if it exists)
</summary>
</member>
<member name="M:Fake.SqlServer.DropDb(Fake.SqlServer.ServerInfo)">
<summary>
 Drops the given InitialCatalog from the server (if it exists)
</summary>
</member>
<member name="M:Fake.SqlServer.intitialCatalogExistsOnServer(Fake.SqlServer.ServerInfo)">
<summary>
 Checks wether the given InitialCatalog exists on the server    
</summary>
</member>
<member name="M:Fake.SqlServer.getDatabase(Fake.SqlServer.ServerInfo)">
<summary>
 Gets the initial catalog as database instance
</summary>
</member>
<member name="M:Fake.SqlServer.getDBName(Fake.SqlServer.ServerInfo)">
<summary>
 Gets the initial catalog name
</summary>
</member>
<member name="M:Fake.SqlServer.getServerName(Fake.SqlServer.ServerInfo)">
<summary>
 Gets the name of the sercer
</summary>
</member>
<member name="M:Fake.SqlServer.existDBOnServer(Fake.SqlServer.ServerInfo,System.String)">
<summary>
 Checks wether the given Database exists on the server
</summary>
</member>
<member name="M:Fake.SqlServer.getDatabaseNamesFromServer(Fake.SqlServer.ServerInfo)">
<summary>
 gets the DatabaseNames from the server
</summary>
</member>
<member name="M:Fake.SqlServer.getServerInfo(System.String)">
<summary>
 Gets a connection to the SQL server and an instance to the ConnectionStringBuilder
</summary>
</member>
<member name="T:Fake.SqlServer">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.StringHelper.op_LessMultiply(System.String,System.String)">
<summary>
 Checks wether the given text starts with the given prefix
</summary>
</member>
<member name="M:Fake.StringHelper.toLines(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Converts a sequence of strings into a string separated with line ends
</summary>
</member>
<member name="M:Fake.StringHelper.trimSlash(System.String)">
<summary>
 Removes the slashes from the end of the given string
</summary>
</member>
<member name="M:Fake.StringHelper.toRelativePath(System.String)">
<summary>
 Replaces the absolute path to a relative
</summary>
</member>
<member name="M:Fake.StringHelper.appendFileNamesIfNotNull(System.Collections.Generic.IEnumerable{System.String},System.Text.StringBuilder)">
<summary>
 Appends all notnull fileNames
</summary>
</member>
<member name="M:Fake.StringHelper.appendStringIfValueIsNotNullOrEmpty(System.String)">
<summary>
 Appends a text if the value is not null or empty
</summary>
</member>
<member name="M:Fake.StringHelper.appendStringIfValueIsNotNull``1(``0)">
<summary>
 Appends a text if the value is not null
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfNotNull``1(``0,System.String)">
<summary>
 Appends a text if the value is not null
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfFalse(System.Boolean)">
<summary>
 Appends a text if the predicate is false
</summary>
</member>
<member name="M:Fake.StringHelper.appendIfTrue(System.Boolean,System.String,System.Text.StringBuilder)">
<summary>
 Appends a text if the predicate is true
</summary>
</member>
<member name="M:Fake.StringHelper.append(System.String,System.Text.StringBuilder)">
<summary>
 Appends a text
</summary>
</member>
<member name="M:Fake.StringHelper.EncapsulateApostrophe(System.String)">
<summary>
 Encapsulates the Apostrophe
</summary>
</member>
<member name="M:Fake.StringHelper.RemoveLineBreaks(System.String)">
<summary>
 Removes linebreaks from the given string
</summary>
</member>
<member name="M:Fake.StringHelper.replace(System.String,System.String,System.String)">
<summary>
 Replaces the given pattern in the given text with the replacement
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFileAsString(System.String)">
<summary>
 Reads a file as one text
</summary>
</member>
<member name="M:Fake.StringHelper.separated(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Converts a sequence of strings to a string with delimiters
</summary>
</member>
<member name="M:Fake.StringHelper.AppendToFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Appends all lines to a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.WriteFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Writes a file line by line
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.StringHelper.ReplaceFile(System.String,System.String)">
<summary>
 Replaces the file with the given string
</summary>
</member>
<member name="M:Fake.StringHelper.WriteStringToFile(System.Boolean,System.String,System.String)">
<summary>
 Writes string to a file
</summary>
</member>
<member name="M:Fake.StringHelper.WriteToFile(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Writes a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.ReadFile(System.String)">
<summary>
 Reads a file line by line
</summary>
</member>
<member name="M:Fake.StringHelper.isNullOrEmpty(System.String)">
<summary>
 Returns if the string is null or empty
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.StringHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.TargetHelper.Run">
<summary>
 Runs a Target and its dependencies
</summary>
</member>
<member name="M:Fake.TargetHelper.And``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Appends the dependency to the list of dependencies
</summary>
</member>
<member name="M:Fake.TargetHelper.Dependency``1(``0)">
<summary>
 Converts a dependency into a list
</summary>
</member>
<member name="M:Fake.TargetHelper.For(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Allows to use For? syntax for Dependencies
</summary>
</member>
<member name="M:Fake.TargetHelper.op_DynamicAssignment``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},``0,``1)">
<summary>
 Allows to use Tokens instead of strings for TargetNames
</summary>
</member>
<member name="M:Fake.TargetHelper.op_Dynamic``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0)">
<summary>
 Allows to use Tokens instead of strings
</summary>
</member>
<member name="M:Fake.TargetHelper.ActivateFinalTarget(System.String)">
<summary>
 Activates the FinalTarget
</summary>
</member>
<member name="M:Fake.TargetHelper.FinalTarget(System.String,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Registers a final target (not activated)
</summary>
</member>
<member name="M:Fake.TargetHelper.run(System.String)">
<summary>
 Runs a Target and its dependencies        
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.TargetHelper.runFinalTargets">
<summary>
 Runs all activated final targets (in alphabetically order)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.TargetHelper.Target(System.String,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a Target
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetTemplate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a TargetTemplate      
</summary>
</member>
<member name="M:Fake.TargetHelper.TargetTemplateWithDependecies``1(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Creates a TargetTemplate with dependencies
</summary>
</member>
<member name="M:Fake.TargetHelper.targetFromTemplate``1(Fake.TargetHelper.TargetTemplate{``0},System.String,``0)">
<summary>
 Creates a target from template
</summary>
</member>
<member name="M:Fake.TargetHelper.op_LessEqualsEquals(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Dependencies operator
</summary>
</member>
<member name="M:Fake.TargetHelper.Dependencies(System.String)">
<summary>
 Adds the dependencies to the list of dependencies  
</summary>
</member>
<member name="M:Fake.TargetHelper.dependency(System.String,System.String)">
<summary>
 Adds the dependency to the list of dependencies
</summary>
</member>
<member name="M:Fake.TargetHelper.DoNothing">
<summary>
 Do nothing - fun () -&gt; ()   
</summary>
</member>
<member name="M:Fake.TargetHelper.dependencyString``1(Fake.TargetHelper.TargetTemplate{``0})">
<summary>
 Returns the DependencyString for the given target
</summary>
</member>
<member name="M:Fake.TargetHelper.getTarget(System.String)">
<summary>
 Gets a target with the given name from the target dictionary
</summary>
</member>
<member name="P:Fake.TargetHelper.ExecutedTargetTimes">
<summary>
 The executed target time
</summary>
</member>
<member name="P:Fake.TargetHelper.ExecutedTargets">
<summary>
 The executed targets
</summary>
</member>
<member name="P:Fake.TargetHelper.FinalTargets">
<summary>
 Final Targets - stores final target and if it is activated
</summary>
</member>
<member name="P:Fake.TargetHelper.TargetDict">
<summary>
 TargetDictionary  
</summary>
</member>
<member name="T:Fake.TargetHelper">

</member>
<member name="M:Fake.TeamCityHelper.getRecentlyFailedTests">
<summary>
 Gets the recently failed tests
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ComparisonFailure(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Reports a failed comparison.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.TestFailed(System.String,System.String,System.String)">
<summary>
 Reports a failed test.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetBuildStatistic(System.String,System.String)">
<summary>
 Reports a build statistic.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.SetBuildNumber(System.String)">
<summary>
 Sets the TeamCity build number.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.PublishArticfact(System.String)">
<summary>
 Publishes an artifact on the TeamcCity build server.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportBuildStatus(System.String,System.String)">
<summary>
 Reports the build status.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgressFinish(System.String)">
<summary>
 Reports the progress end.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgressStart(System.String)">
<summary>
 Reports the progress start.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.ReportProgress(System.String)">
<summary>
 Reports the progress.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.StartTestSuite(System.String)">
<summary>
 Starts the test suite.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.FinishTestSuite(System.String)">
<summary>
 Finishes the test suite.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.IgnoreTestCase(System.String,System.String)">
<summary>
 Ignores the test case.      
</summary>
</member>
<member name="M:Fake.TeamCityHelper.FinishTestCase(System.String,System.TimeSpan)">
<summary>
 Finishes the test case.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.StartTestCase(System.String)">
<summary>
 Starts the test case.
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityFXCopImport(System.String)">
<summary>
 Sends an FXCop results filename to TeamCity    
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityNUnitImport(System.String)">
<summary>
 Sends an NUnit results filename to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendTeamCityError(System.String)">
<summary>
 Sends an error to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendStrToTeamCity(System.String)">
<summary>
 Send message to TeamCity
</summary>
</member>
<member name="M:Fake.TeamCityHelper.sendToTeamCity(Microsoft.FSharp.Core.PrintfFormat{Microsoft.FSharp.Core.FSharpFunc`2{System.String,System.String},Microsoft.FSharp.Core.Unit,System.String,System.String},System.String)">
<summary>
 Send message to TeamCity
</summary>
</member>
<member name="T:Fake.TeamCityHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.TeamCityRESTHelper.getProjects(System.String,System.String,System.String)">
<summary>
 Gets all projects on the TeamCity 
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getProject(System.String,System.String,System.String,System.String)">
<summary>
 Gets a projects from the TeamCity server
</summary>
</member>
<member name="M:Fake.TeamCityRESTHelper.getBuildConfig(System.String,System.String,System.String,System.String)">
<summary>
 Gets a projects from the TeamCity server
</summary>
</member>
<member name="">

</member>
<member name="M:Fake.TeamCityRESTHelper.getRESTVersion(System.String,System.String,System.String)">
<summary>
 Returns the REST version of the TeamCity server
</summary>
</member>
<member name="">

</member>
<member name="T:Fake.TeamCityRESTHelper">

</member>
<member name="M:Fake.TemplateHelper.processTemplates(System.Collections.Generic.IEnumerable{System.Tuple`2{System.String,System.String}},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Replaces the templates with the given replacements
</summary>
</member>
<member name="P:Fake.TemplateHelper.saveFiles">
<summary>
 saves all files (lazy - file by file!)
</summary>
</member>
<member name="M:Fake.TemplateHelper.replaceKeywords``2(System.Collections.Generic.IEnumerable{System.Tuple`2{System.String,System.String}})">
<summary>
 replaces a bunch of the keywords in all files (lazy - line by line!)
</summary>
</member>
<member name="M:Fake.TemplateHelper.loadTemplates(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Loads all templates (lazy - line by line!)    
</summary>
</member>
<member name="T:Fake.TemplateHelper">

</member>
<member name="M:Fake.TimeoutHelper.waitFor(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Boolean},System.TimeSpan,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Waits until the given function returns true or the timeout is reached
</summary>
</member>
<member name="T:Fake.TimeoutHelper">

</member>
<member name="M:Fake.TraceHelper.WaitUntilEverythingIsPrinted">
<summary>
 Waits until the message queue is empty
</summary>
</member>
<member name="M:Fake.TraceHelper.traceEndTask(System.String,System.String)">
<summary>
 Traces the end of a task
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartTask(System.String,System.String)">
<summary>
 Traces the begin of a task
</summary>
</member>
<member name="M:Fake.TraceHelper.traceEndTarget(System.String)">
<summary>
 Traces the end of a target   
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartTarget(System.String,System.String)">
<summary>
 Traces the begin of a target
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.TraceHelper.traceEndBuild">
<summary>
 Traces the end of the build
</summary>
</member>
<member name="M:Fake.TraceHelper.traceStartBuild">
<summary>
 Traces the begin of the build
</summary>
</member>
<member name="M:Fake.TraceHelper.traceHeader(System.String)">
<summary>
 Traces a header
</summary>
</member>
<member name="M:Fake.TraceHelper.traceLine">
<summary>
 Traces a line
</summary>
</member>
<member name="P:Fake.TraceHelper.fakeVersionStr">
<summary>
 Gets the FAKE Version string
</summary>
</member>
<member name="M:Fake.TraceHelper.TraceEnvironmentVariables">
<summary>
 Traces the EnvironmentVariables
</summary>
</member>
<member name="M:Fake.TraceHelper.traceError(System.String)">
<summary>
 Traces an error (in red)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceFAKE``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a trace to the command line (in yellow)
</summary>
</member>
<member name="M:Fake.TraceHelper.traceImportant(System.String)">
<summary>
 Writes a trace to stderr (in green)  
</summary>
</member>
<member name="M:Fake.TraceHelper.traceVerbose(System.String)">
<summary>
 Writes a trace to the command line (in green) if the verbose mode is activated.
</summary>
</member>
<member name="M:Fake.TraceHelper.tracef``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a message to the command line (in green) and without a line break
</summary>
</member>
<member name="M:Fake.TraceHelper.tracefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Writes a message to the command line (in green)
</summary>
</member>
<member name="M:Fake.TraceHelper.trace(System.String)">
<summary>
 Writes a trace to the command line (in green)
</summary>
</member>
<member name="M:Fake.TraceHelper.logColored(System.Boolean,System.ConsoleColor,System.Boolean,System.String)">
<summary>
 Writes a trace output to the message buffer (in the given color)
</summary>
</member>
<member name="M:Fake.TraceHelper.logVerbosefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified string if the verbose mode is activated.
</summary>
</member>
<member name="M:Fake.TraceHelper.logf``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified message (without line break)
</summary>
</member>
<member name="M:Fake.TraceHelper.logfn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
<summary>
 Logs the specified message
</summary>
</member>
<member name="P:Fake.TraceHelper.log">
<summary>
 Logs the specified string        
</summary>
</member>
<member name="M:Fake.TraceHelper.logMessage(System.Boolean,System.Boolean,System.String)">
<summary>
 Logs the specified string (via message buffer)
</summary>
</member>
<member name="M:Fake.TraceHelper.xmlMessage(System.String)">
<summary>
 Writes a XML message to the bufffer.
</summary>
</member>
<member name="">

</member>
<member name="P:Fake.TraceHelper.fakeVersion">
<summary>
 Gets the FAKE version no.
</summary>
</member>
<member name="P:Fake.TraceHelper.fakePath">
<summary>
 Gets the path of the current FAKE instance
</summary>
</member>
<member name="P:Fake.TraceHelper.verbose">
<summary>
 Trace verbose output
</summary>
</member>
<member name="T:Fake.TraceHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.VSSHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Fake.WiXHelper.WiX(Microsoft.FSharp.Core.FSharpFunc`2{Fake.WiXHelper.WiXParams,Fake.WiXHelper.WiXParams},System.String,System.String)">
<summary>
 Uses Candle and Light to create a msi.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.WiXHelper.WiXDefaults">
<summary>
 WiX default params  
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Fake.WiXHelper">

</member>
<member name="M:Fake.XCopyHelper.XCopy(System.String,System.String)">
<summary>
 Performs a XCopy 
  param source: The source directory (fileName)
  param destination: The target directory (fileName)
</summary>
</member>
<member name="T:Fake.XCopyHelper">

</member>
<member name="M:Fake.XMLHelper.XmlPoke(System.String,System.String,System.String)">
<summary>
 Replaces text in an XML file at the location specified by an XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.XPathReplace(System.String,System.String,System.Xml.XmlDocument)">
<summary>
 Replaces text in XML document specified by an XPath expression.
</summary>
</member>
<member name="M:Fake.XMLHelper.DocElement(System.Xml.XmlDocument)">
<summary>
 Gets the DocumentElement of the XmlDocument
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLDoc(System.String)">
<summary>
 Gets the result as xml
</summary>
</member>
<member name="M:Fake.XMLHelper.parseSubNode``1(System.String,Microsoft.FSharp.Core.FSharpFunc`2{System.Xml.XmlNode,``0})">
<summary>
 parses a subnode
</summary>
</member>
<member name="M:Fake.XMLHelper.parse``2(System.String,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0)">
<summary>
 parses a node
</summary>
</member>
<member name="M:Fake.XMLHelper.getSubNode(System.String)">
<summary>
 gets the sub node with the name
</summary>
</member>
<member name="M:Fake.XMLHelper.getChilds``1(``0)">
<summary>
 Gets the child nodes for the given nodes
</summary>
</member>
<member name="M:Fake.XMLHelper.getAttribute``1(System.String,``0)">
<summary>
 Gets the attribute with the given name 
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlCDataElement(System.String,System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an CData element  
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlAttribute``1(System.String,``0,System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml attribute
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlEndElement(System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml element end
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlStartElement(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml element start
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlComment(System.String,System.Xml.XmlTextWriter)">
<summary>
 Writes an Xml comment      
</summary>
</member>
<member name="M:Fake.XMLHelper.XmlWriter(System.String)">
<summary>
 Generates an XmlWriter    
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLRead_Int(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
 returns if the value is an int and the value
</summary>
</member>
<member name="M:Fake.XMLHelper.XMLRead(System.Boolean,System.String,System.String,System.String,System.String)">
<summary>
 Reads a value from a XML document using a XPath
</summary>
</member>
<member name="T:Fake.XMLHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Fake.XUnitHelper.XUnitDefaults">
<summary>
 xUnit default params  
</summary>
</member>
<member name="T:Fake.XUnitHelper">

</member>
<member name="M:Fake.ZipHelper.Unzip(System.String,System.String)">
<summary>
 Unzips a file with the given fileName

 Parameter 1: target - The target directory.
 Parameter 2: fileName - The fileName of the zip file.
</summary>
</member>
<member name="M:Fake.ZipHelper.ZipFile(System.String,System.String)">
<summary>
 Creates a zip file with the given file 

 Parameter 1: fileName - The fileName of the resulting zip file.
 Parameter 2: fileName - The file to zip.
</summary>
</member>
<member name="M:Fake.ZipHelper.Zip(System.String,System.String)">
<summary>
 Creates a zip file with the given files 

 Parameter 1: workingDir - The relative dir of the zip files. Use this parameter to influence directory structure within zip file.
 Parameter 2: fileName - The fileName of the resulting zip file.
 Parameter 3: files - A sequence with files to zip.
</summary>
</member>
<member name="M:Fake.ZipHelper.CreateZip(System.String,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Creates a zip file with the given files
</summary>
</member>
<member name="P:Fake.ZipHelper.DefaultZipLevel">
<summary>
 The default zip level
</summary>
</member>
<member name="T:Fake.ZipHelper">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FakeLib.AssemblyInfo">

</member>
</members>
</doc>
